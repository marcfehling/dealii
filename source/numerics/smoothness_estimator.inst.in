// ---------------------------------------------------------------------
//
// Copyright (C) 2010 - 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     VEC : REAL_VECTOR_TYPES)
  {
#if deal_II_dimension != 1 && deal_II_dimension <= deal_II_space_dimension
    template void SmoothnessEstimator::legendre_coefficient_decay<
      deal_II_dimension,
      deal_II_space_dimension,
      VEC>(FESeries::Legendre<deal_II_dimension, deal_II_space_dimension> &,
           const hp::DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
           const std::vector<const VEC *> &,
           const std::vector<Vector<float> *> &,
           const std::function<void(std::vector<bool> & flags)>,
           const double);

    template void SmoothnessEstimator::legendre_coefficient_decay<
      deal_II_dimension,
      deal_II_space_dimension,
      VEC>(FESeries::Legendre<deal_II_dimension, deal_II_space_dimension> &,
           const hp::DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
           const VEC &,
           Vector<float> &,
           const std::function<void(std::vector<bool> & flags)>,
           const double);

    template void SmoothnessEstimator::legendre_coefficient_decay<
      deal_II_dimension,
      deal_II_space_dimension,
      VEC>(const hp::DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
           const VEC &,
           Vector<float> &,
           const std::function<void(std::vector<bool> & flags)>,
           const double);

    template void SmoothnessEstimator::fourier_coefficient_decay<
      deal_II_dimension,
      deal_II_space_dimension,
      VEC>(FESeries::Fourier<deal_II_dimension, deal_II_space_dimension> &,
           const hp::DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
           const std::vector<const VEC *> &,
           const std::vector<Vector<float> *> &,
           const VectorTools::NormType);
    template void SmoothnessEstimator::fourier_coefficient_decay<
      deal_II_dimension,
      deal_II_space_dimension,
      VEC>(FESeries::Fourier<deal_II_dimension, deal_II_space_dimension> &,
           const hp::DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
           const VEC &,
           Vector<float> &,
           const VectorTools::NormType);

    template void SmoothnessEstimator::fourier_coefficient_decay<
      deal_II_dimension,
      deal_II_space_dimension,
      VEC>(const hp::DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
           const std::vector<const VEC *> &,
           const std::vector<Vector<float> *> &,
           const VectorTools::NormType);
    template void SmoothnessEstimator::fourier_coefficient_decay<
      deal_II_dimension,
      deal_II_space_dimension,
      VEC>(const hp::DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
           const VEC &,
           Vector<float> &,
           const VectorTools::NormType);

#endif
  }
